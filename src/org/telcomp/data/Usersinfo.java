package org.telcomp.data;


import java.io.Serializable;

 /**
  * Usersinfo Value Object.
  * This class is value object representing database table usersinfo
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Usersinfo implements Cloneable, Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String identification;
    private String sipuri;
    private String state;
    private String email;
    private String username;
    private String phone;
    private String facebookid;
    private String twitterid;
    private String linkedinid;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Usersinfo () {

    }

    public Usersinfo (String identificationIn) {

          this.identification = identificationIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getIdentification() {
          return this.identification;
    }
    public void setIdentification(String identificationIn) {
          this.identification = identificationIn;
    }

    public String getSipuri() {
          return this.sipuri;
    }
    public void setSipuri(String sipuriIn) {
          this.sipuri = sipuriIn;
    }

    public String getState() {
          return this.state;
    }
    public void setState(String stateIn) {
          this.state = stateIn;
    }

    public String getEmail() {
          return this.email;
    }
    public void setEmail(String emailIn) {
          this.email = emailIn;
    }

    public String getUsername() {
          return this.username;
    }
    public void setUsername(String usernameIn) {
          this.username = usernameIn;
    }

    public String getPhone() {
          return this.phone;
    }
    public void setPhone(String phoneIn) {
          this.phone = phoneIn;
    }

    public String getFacebookid() {
          return this.facebookid;
    }
    public void setFacebookid(String facebookidIn) {
          this.facebookid = facebookidIn;
    }

    public String getTwitterid() {
          return this.twitterid;
    }
    public void setTwitterid(String twitteridIn) {
          this.twitterid = twitteridIn;
    }
    
    public String getLinkedinid() {
        return this.linkedinid;
  }
  public void setLinkedinid(String linkedinidIn) {
        this.linkedinid = linkedinidIn;
  }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String identificationIn,
          String sipuriIn,
          String stateIn,
          String emailIn,
          String usernameIn,
          String phoneIn,
          String facebookidIn,
          String twitteridIn,
          String linkedinidIn) {
          this.identification = identificationIn;
          this.sipuri = sipuriIn;
          this.state = stateIn;
          this.email = emailIn;
          this.username = usernameIn;
          this.phone = phoneIn;
          this.facebookid = facebookidIn;
          this.twitterid = twitteridIn;
          this.linkedinid = linkedinidIn;
    }


    /** 
     * hasEqualMapping-method will compare two Usersinfo instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Usersinfo valueObject) {

          if (this.identification == null) {
                    if (valueObject.getIdentification() != null)
                           return(false);
          } else if (!this.identification.equals(valueObject.getIdentification())) {
                    return(false);
          }
          if (this.sipuri == null) {
                    if (valueObject.getSipuri() != null)
                           return(false);
          } else if (!this.sipuri.equals(valueObject.getSipuri())) {
                    return(false);
          }
          if (this.state == null) {
                    if (valueObject.getState() != null)
                           return(false);
          } else if (!this.state.equals(valueObject.getState())) {
                    return(false);
          }
          if (this.email == null) {
                    if (valueObject.getEmail() != null)
                           return(false);
          } else if (!this.email.equals(valueObject.getEmail())) {
                    return(false);
          }
          if (this.username == null) {
                    if (valueObject.getUsername() != null)
                           return(false);
          } else if (!this.username.equals(valueObject.getUsername())) {
                    return(false);
          }
          if (this.phone == null) {
                    if (valueObject.getPhone() != null)
                           return(false);
          } else if (!this.phone.equals(valueObject.getPhone())) {
                    return(false);
          }
          if (this.facebookid == null) {
                    if (valueObject.getFacebookid() != null)
                           return(false);
          } else if (!this.facebookid.equals(valueObject.getFacebookid())) {
                    return(false);
          }
          if (this.twitterid == null) {
                    if (valueObject.getTwitterid() != null)
                           return(false);
          } else if (!this.twitterid.equals(valueObject.getTwitterid())) {
                    return(false);
          }
          if (this.linkedinid == null) {
              if (valueObject.getLinkedinid() != null)
                     return(false);
          } else if (!this.linkedinid.equals(valueObject.getLinkedinid())) {
              return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Usersinfo, mapping to table usersinfo\n");
        out.append("Persistent attributes: \n"); 
        out.append("identification = " + this.identification + "\n"); 
        out.append("sipuri = " + this.sipuri + "\n"); 
        out.append("state = " + this.state + "\n"); 
        out.append("email = " + this.email + "\n"); 
        out.append("username = " + this.username + "\n"); 
        out.append("phone = " + this.phone + "\n"); 
        out.append("facebookid = " + this.facebookid + "\n"); 
        out.append("twitterid = " + this.twitterid + "\n"); 
        out.append("linkedinid = " + this.linkedinid + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Usersinfo cloned = new Usersinfo();

        if (this.identification != null)
             cloned.setIdentification(new String(this.identification)); 
        if (this.sipuri != null)
             cloned.setSipuri(new String(this.sipuri)); 
        if (this.state != null)
             cloned.setState(new String(this.state)); 
        if (this.email != null)
             cloned.setEmail(new String(this.email)); 
        if (this.username != null)
             cloned.setUsername(new String(this.username)); 
        if (this.phone != null)
             cloned.setPhone(new String(this.phone)); 
        if (this.facebookid != null)
             cloned.setFacebookid(new String(this.facebookid)); 
        if (this.twitterid != null)
             cloned.setTwitterid(new String(this.twitterid));
        if (this.linkedinid != null)
            cloned.setLinkedinid(new String(this.linkedinid));
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}